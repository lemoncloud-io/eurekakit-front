# name: deploy-dev
# on:
#     push:
#         branches:
#             - develop

# jobs:
#     changes:
#         name: Check changed projects
#         runs-on: ubuntu-latest
#         permissions:
#             pull-requests: read
#         outputs:
#             admin: ${{ steps.filter.outputs.admin }}
#             web: ${{ steps.filter.outputs.web }}
#             projects: ${{ steps.filter.outputs.changes }}
#         steps:
#             - uses: actions/checkout@v4
#               with:
#                   fetch-depth: 0
#                   token: ${{ secrets.LEMON_BOT_TOKEN }}
#             - uses: dorny/paths-filter@v3
#               id: filter
#               with:
#                   base: 'develop'
#                   filters: |
#                       admin:
#                           - 'apps/admin/**'
#                           - 'assets/**'
#                           - 'libs/**'
#                       web:
#                           - 'apps/web/**'
#                           - 'assets/**'
#                           - 'libs/**'

#     version-update:
#         needs: changes
#         if: ${{ fromJson(needs.changes.outputs.projects)[0] != null }}
#         name: Update Versions
#         runs-on: ubuntu-latest
#         permissions:
#             contents: write
#             pull-requests: write
#         outputs:
#             root-version: ${{ steps.version-update.outputs.root-version }}
#             admin-version: ${{ steps.version-update.outputs.admin-version }}
#             web-version: ${{ steps.version-update.outputs.web-version }}
#         steps:
#             - name: Check out repository
#               uses: actions/checkout@v4
#               with:
#                   fetch-depth: 0
#                   token: ${{ secrets.LEMON_BOT_TOKEN }}

#             - name: Setup Node.js
#               uses: actions/setup-node@v3
#               with:
#                   node-version-file: '.nvmrc'

#             - name: Get Yarn cache path
#               id: yarn-cache-dir-path
#               run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

#             - name: Cache dependencies
#               uses: actions/cache@v3
#               with:
#                   path: |
#                       ${{ steps.yarn-cache-dir-path.outputs.dir }}
#                       node_modules
#                   key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#                   restore-keys: |
#                       ${{ runner.os }}-yarn-

#             - name: Install dependencies
#               if: steps.cache-dependencies.outputs.cache-hit != 'true'
#               run: yarn install --frozen-lockfile

#             - name: Configure git
#               run: |
#                   git config user.name "github-actions[bot]"
#                   git config user.email "github-actions[bot]@users.noreply.github.com"

#             - name: Update versions and changelog
#               id: version-update
#               run: |
#                   chmod +x scripts/version-update.js

#                   # 변경된 프로젝트 확인 및 버전 업데이트
#                   if [[ "${{ needs.changes.outputs.web }}" == "true" && "${{ needs.changes.outputs.admin }}" == "true" ]]; then
#                     echo "Both web and admin changes detected - updating all projects"
#                     node scripts/version-update.js
#                   elif [[ "${{ needs.changes.outputs.web }}" == "true" ]]; then
#                     echo "Web changes detected - updating web project"
#                     node scripts/version-update.js web
#                   elif [[ "${{ needs.changes.outputs.admin }}" == "true" ]]; then
#                     echo "Admin changes detected - updating admin project"
#                     node scripts/version-update.js admin
#                   fi

#                   # Export updated versions
#                   # root
#                   if [ -f "package.json" ]; then
#                     ROOT_VERSION=$(node -p "require('./package.json').version")
#                     echo "root-version=${ROOT_VERSION}" >> $GITHUB_OUTPUT
#                   fi

#                   # web
#                   if [ -f "apps/web/package.json" ]; then
#                     WEB_VERSION=$(node -p "require('./apps/web/package.json').version")
#                     echo "web-version=${WEB_VERSION}" >> $GITHUB_OUTPUT
#                   fi

#                   # admin
#                   if [ -f "apps/admin/package.json" ]; then
#                     ADMIN_VERSION=$(node -p "require('./apps/admin/package.json').version")
#                     echo "admin-version=${ADMIN_VERSION}" >> $GITHUB_OUTPUT
#                   fi

#             - name: Commit and push changes
#               env:
#                   ROOT_VERSION: ${{ steps.version-update.outputs.root-version }}
#               run: |
#                   git add .
#                   git commit -m "chore(release): bump root version to ${ROOT_VERSION} [skip ci]" || echo "No changes to commit"
#                   git push

#     create-draft-release:
#         needs: [changes, version-update]
#         if: ${{ fromJson(needs.changes.outputs.projects)[0] != null }}
#         runs-on: ubuntu-latest
#         permissions:
#             contents: write
#             pull-requests: write
#         steps:
#             - uses: release-drafter/release-drafter@v5
#               id: draft
#               with:
#                   publish: false
#                   version: ${{ needs.version-update.outputs.root-version }}
#                   tag: ${{ needs.version-update.outputs.root-version }}
#               env:
#                   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#     build-and-deploy:
#         needs: [changes, version-update]
#         runs-on: ubuntu-latest
#         name: Build and Deploy
#         strategy:
#             matrix:
#                 project: [web, admin]
#                 include:
#                     - project: web
#                       version: ${{ needs.version-update.outputs.web-version }}
#                       should_run: ${{ needs.changes.outputs.web == 'true' }}
#                     - project: admin
#                       version: ${{ needs.version-update.outputs.admin-version }}
#                       should_run: ${{ needs.changes.outputs.admin == 'true' }}
#         steps:
#             - name: Skip if no changes
#               if: ${{ matrix.should_run }}
#               run: echo "Processing ${{ matrix.project }}"

#             - name: Checkout code
#               uses: actions/checkout@v4
#               with:
#                   fetch-depth: 0
#                   token: ${{ secrets.LEMON_BOT_TOKEN }}

#             - name: Setup Node.js
#               uses: actions/setup-node@v3
#               with:
#                   node-version-file: '.nvmrc'

#             - name: Get Yarn cache path
#               id: yarn-cache-dir-path
#               run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

#             - name: Cache dependencies
#               uses: actions/cache@v3
#               with:
#                   path: |
#                       ${{ steps.yarn-cache-dir-path.outputs.dir }}
#                       node_modules
#                   key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#                   restore-keys: |
#                       ${{ runner.os }}-yarn-

#             - name: Install dependencies
#               if: steps.cache-dependencies.outputs.cache-hit != 'true'
#               run: yarn install --frozen-lockfile

#             - name: Configure AWS Credentials
#               uses: aws-actions/configure-aws-credentials@v1
#               with:
#                   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#                   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#                   aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

#             - name: Deploy to DEV
#               run: |
#                   chmod +x scripts/deploy-${{ matrix.project }}.sh
#                   yarn ${{ matrix.project }}:deploy:dev
